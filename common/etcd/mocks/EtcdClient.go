// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	etcd "github.com/huaweicloud/devcloud-go/common/etcd"
	mock "github.com/stretchr/testify/mock"
	clientv3 "go.etcd.io/etcd/client/v3"
)

// EtcdClient is an autogenerated mock type for the EtcdClient type
type EtcdClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *EtcdClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Del provides a mock function with given fields: key
func (_m *EtcdClient) Del(key string) (int64, error) {
	ret := _m.Called(key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key
func (_m *EtcdClient) Get(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: prefix
func (_m *EtcdClient) List(prefix string) ([]*etcd.KeyValue, error) {
	ret := _m.Called(prefix)

	var r0 []*etcd.KeyValue
	if rf, ok := ret.Get(0).(func(string) []*etcd.KeyValue); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*etcd.KeyValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: key, value
func (_m *EtcdClient) Put(key string, value string) (string, error) {
	ret := _m.Called(key, value)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: prefix, startIndex, onEvent
func (_m *EtcdClient) Watch(prefix string, startIndex int64, onEvent func(*clientv3.Event)) {
	_m.Called(prefix, startIndex, onEvent)
}
